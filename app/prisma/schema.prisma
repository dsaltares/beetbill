// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  company       Company?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id         String   @id @default(cuid())
  name       String
  number     String
  vatNumber  String?
  email      String?
  website    String?
  country    String?
  address    String?
  postCode   String?
  city       String?
  iban       String?
  userId     String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  originalId String?

  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  original         Company?  @relation("InvoiceCompanies", fields: [originalId], references: [id], onDelete: SetNull)
  invoiceCompanies Company[] @relation("InvoiceCompanies")
  products         Product[]
  clients          Client[]
  invoice          Invoice?
}

model Product {
  id          String    @id @default(cuid())
  name        String
  includesVat Boolean   @default(false)
  price       Float     @default(0)
  currency    String    @default("EUR")
  vat         Float     @default(0)
  unit        String    @default("h")
  companyId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  originalId  String?

  company         Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  original        Product?         @relation("InvoiceProducts", fields: [originalId], references: [id], onDelete: SetNull)
  products        Product[]        @relation("InvoiceProducts")
  invoiceProducts InvoiceProduct[]
}

model Client {
  id           String    @id @default(cuid())
  name         String
  number       String
  vatNumber    String?
  firstName    String?
  lastName     String?
  email        String?
  country      String?
  address      String?
  postCode     String?
  city         String?
  paymentTerms Int       @default(7)
  companyId    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  originalId   String?

  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  original       Client?  @relation("InvoiceClients", fields: [originalId], references: [id], onDelete: SetNull)
  invoiceClients Client[] @relation("InvoiceClients")
  invoice        Invoice?
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
}

model Invoice {
  id        String        @id @default(cuid())
  status    InvoiceStatus @default(DRAFT)
  prefix    String        @default("")
  number    Int
  date      DateTime      @default(now())
  companyId String        @unique
  clientId  String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?

  company         Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  client          Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoiceProducts InvoiceProduct[]

  @@unique([prefix, number, companyId])
}

model InvoiceProduct {
  id        String   @id @default(cuid())
  invoiceId String
  productId String
  quantity  Float    @default(1)
  date      DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([invoiceId, productId])
}
