// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  company       Company?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[]
  clients  Client[]
  states   CompanyState[]
}

model CompanyState {
  id          String   @id @default(cuid())
  name        String
  number      String
  vatNumber   String?
  contactName String?
  email       String?
  website     String?
  country     String?
  address     String?
  postCode    String?
  city        String?
  iban        String?
  companyId   String
  createdAt   DateTime @default(now())

  company  Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  invoices Invoice[]
}

model Product {
  id        String    @id @default(cuid())
  companyId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  company Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  states  ProductState[]
}

model ProductState {
  id          String   @id @default(cuid())
  name        String
  includesVat Boolean  @default(false)
  price       Float    @default(0)
  currency    String   @default("EUR")
  vat         Float    @default(0)
  unit        String   @default("h")
  createdAt   DateTime @default(now())
  productId   String

  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  lineItems LineItem[]
}

model Client {
  id        String    @id @default(cuid())
  companyId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  company Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  states  ClientState[]
}

model ClientState {
  id           String   @id @default(cuid())
  name         String
  number       String
  vatNumber    String?
  contactName  String?
  email        String?
  country      String?
  address      String?
  postCode     String?
  city         String?
  paymentTerms Int      @default(7)
  createdAt    DateTime @default(now())
  clientId     String

  client   Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoices Invoice[]
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
}

model Invoice {
  id      String        @id @default(cuid())
  status  InvoiceStatus @default(DRAFT)
  prefix  String        @default("")
  number  Int?
  date    DateTime      @default(now())
  message String        @default("")

  companyStateId String
  clientStateId  String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  companyState CompanyState @relation(fields: [companyStateId], references: [id])
  clientState  ClientState  @relation(fields: [clientStateId], references: [id])
  items        LineItem[]

  @@unique([prefix, number, companyStateId])
}

model LineItem {
  id             String   @id @default(cuid())
  invoiceId      String
  productStateId String
  quantity       Float    @default(1)
  date           DateTime @default(now())
  order          Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoice      Invoice      @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  productState ProductState @relation(fields: [productStateId], references: [id], onDelete: Cascade)
}
